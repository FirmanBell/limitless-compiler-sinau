# linex Project
name: linex Project
on:
  workflow_dispatch:
    inputs:
      name:
        description: 'Name'
        default: 'Limitless'
        required: true
        type: string
      aosp-clang:
        description: 'Aosp-clang'
        default: 'https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/refs/tags/android-11.0.0_r46/clang-r383902b1.tar.gz'
        required: true
        type: string
      aosp-gcc-32:
        description: 'Aosp-gcc-32'
        default: 'https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/arm/arm-linux-androideabi-4.9/+archive/refs/tags/android-11.0.0_r46.tar.gz'
        required: true
        type: string
      aosp-gcc-64:
        description: 'Aosp-gcc-64'
        default: 'https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9/+archive/refs/tags/android-11.0.0_r46.tar.gz'
        required: true
        type: string
      kernel-url:
        description: 'Kernel-url'
        default: 'https://github.com/linex-17/Limitless.git'
        required: true
        type: string
      kernel-branch:
        description: 'Kernel-branch'
        default: 'main'
        required: true
        type: string
      kernel-config:
        description: 'Kernel-config'
        default: 'xi_defconfig'
        required: true
        type: string
      kernelsu:
        description: 'KernelSU'
        default: 'curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -s v0.7.6'
        required: true
        type: string
      command:
        description: 'Command+'
        default: 'CROSS_COMPILE=aarch64-linux-android- CROSS_COMPILE_ARM32=arm-linux-androideabi- CLANG_TRIPLE=aarch64-linux-gnu- CC=clang'
        required: true
        type: string
      any-kernel3:
        description: 'Any-Kernel3'
        default: 'https://github.com/osm0sis/AnyKernel3'
        required: true
        type: string
        
jobs:
  limitless-compiler:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Setup
      run: |
         sudo apt-get update
         sudo apt-get install --no-install-recommends -y binutils binutils-aarch64-linux-gnu binutils-arm-linux-gnueabi git ccache automake flex lzop bison gperf build-essential zip curl zlib1g-dev g++-multilib libxml2-utils bzip2 libbz2-dev libbz2-1.0 libghc-bzlib-dev squashfs-tools pngcrush schedtool dpkg-dev liblz4-tool make optipng maven libssl-dev pwgen libswitch-perl policycoreutils minicom libxml-sax-base-perl libxml-simple-perl bc libc6-dev-i386 libx11-dev lib32z-dev libgl1-mesa-dev xsltproc unzip device-tree-compiler python3 aria2
    - name: Download GCC
      run: |
         if [ "${{ inputs.aosp-gcc-64 }}" = "" ]; then
            aria2c -o gcc-aarch64.tar.gz https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9/+archive/refs/tags/android-11.0.0_r46.tar.gz
         else
            aria2c -o gcc-aarch64.tar.gz ${{ inputs.aosp-gcc-64 }}
         fi
         mkdir -p -v $HOME/gcc-64
         tar -C $HOME/gcc-64 -zxf gcc-aarch64.tar.gz
         if [ "${{ inputs.aosp-gcc-32 }}" = "" ]; then
            aria2c -o gcc-arm.tar.gz https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/arm/arm-linux-androideabi-4.9/+archive/refs/tags/android-11.0.0_r46.tar.gz
         else
            aria2c -o gcc-arm.tar.gz ${{ inputs.aosp-gcc-32 }}
         fi
         mkdir -p -v $HOME/gcc-32
         tar -C $HOME/gcc-32 -zxf gcc-arm.tar.gz
    - name: Download Clang
      run: |
         if [ "${{ inputs.aosp-clang }}" = "" ]; then
            aria2c -o aosp-clang.tar.gz https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/refs/tags/android-11.0.0_r46/clang-r383902b1.tar.gz
         else
            aria2c -o aosp-clang.tar.gz ${{ inputs.aosp-clang }}
         fi
         mkdir $HOME/clang -p -v
         tar -C $HOME/clang -zxf aosp-clang.tar.gz
    - name: Download Kernel
      run: |
         git clone --depth=1 ${{ inputs.kernel-url }} -b ${{ inputs.kernel-branch }} kernel-dir
    - name: KernelSU
      run: |
         if [ ${{ inputs.kernelsu }} != false ]; then
            cd kernel-dir
            rm -rf KernelSU
            ${{ inputs.kernelsu }}
         fi
    - name: Compile
      run: |
         mkdir out -p -v
         cd kernel-dir
         export KBUILD_BUILD_USER="linex"
         export KBUILD_BUILD_HOST="project"
         export PATH=$HOME/clang/bin:$HOME/gcc-64/bin:$HOME/gcc-32:$PATH
         COMMAND="make -j$(nproc --all) ${{ inputs.kernel-config }} ARCH=arm64 O=../out all"
         COMMAND+=" ${{ inputs.command }}"
         ${COMMAND}
    - name: AnyKernel3
      run: |
          git clone ${{ inputs.any-kernel3 }} AnyKernel3
          rm -rf AnyKernel3/.git AnyKernel3/.github AnyKernel3/LICENSE AnyKernel3/README.md AnyKernel3/modules AnyKernel3/patch AnyKernel3/ramdisk
          
          if [[ -f out/arch/arm64/boot/Image.gz-dtb ]]; then
            cp out/arch/arm64/boot/Image.gz-dtb AnyKernel3/Image.gz-dtb
          elif [[ -f out/arch/arm64/boot/Image-dtb ]]; then
            cp out/arch/arm64/boot/Image-dtb AnyKernel3/Image-dtb
          elif [[ -f out/arch/arm64/boot/Image.gz ]]; then
            cp out/arch/arm64/boot/Image.gz AnyKernel3/Image.gz
          elif [[ -f out/arch/arm64/boot/Image ]]; then
            cp out/arch/arm64/boot/Image AnyKernel3/Image
          fi
          if [ -f out/arch/arm64/boot/dtbo.img ]; then
            cp out/arch/arm64/boot/dtbo.img AnyKernel3/dtbo.img
          fi
    - name: Upload
      run: |
          mkdir Upload
          cp -rf AnyKernel3/* Upload
    - id: Artifact
      uses: actions/upload-artifact@v4
      with:
        name: "${{ inputs.name }}"
        path: Upload/*
    
